// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id             String          @id @default(cuid())
    name           String?
    email          String?         @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    profile        Profile?
    events         Event[]
    attendedEvents EventAttendee[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Profile {
    id          String  @id @unique @default(cuid())
    userId      String  @unique
    user        User    @relation(fields: [userId], references: [id])
    firstName   String
    lastName    String
    isArtist    Boolean @default(false)
    description String?

    @@index([userId])
}

model Event {
    id          String          @id @unique @default(cuid())
    creatorId   String
    creator     User            @relation(fields: [creatorId], references: [id])
    attendees   EventAttendee[]
    type        String
    title       String
    description String @db.Text
    date        DateTime @db.Date
    time        DateTime @db.Time
    latitude    Float
    longitude   Float
    createdAt   DateTime @default(now())

    @@index([creatorId])
}

model EventAttendee {
    event   Event  @relation(fields: [eventId], references: [id])
    eventId String
    user    User   @relation(fields: [userId], references: [id])
    userId  String

    @@id([eventId, userId])
    @@index([eventId])
    @@index([userId])
}
